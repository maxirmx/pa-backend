name: CI/CD Pipeline

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:  # Allow manual triggering

concurrency:
  group: '${{ github.workflow }}-${{ github.job }}-${{ github.head_ref || github.ref_name }}'
  cancel-in-progress: true

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_USER: app_user
          POSTGRES_PASSWORD: change_this_password
          POSTGRES_DB: secure_app
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: |
          fb_cpp_build
          proxygen-cache
        key: ${{ runner.os }}-dependencies-${{ hashFiles('update_fb_libs.sh') }}
        restore-keys: |
          ${{ runner.os }}-dependencies-

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          cmake \
          libgflags-dev \
          libgoogle-glog-dev \
          libssl-dev \
          zlib1g-dev \
          libzstd-dev \
          libevent-dev \
          libdouble-conversion-dev \
          libboost-all-dev \
          liblz4-dev \
          libbz2-dev \
          libbrotli-dev \
          libsodium-dev \
          openssl \
          nlohmann-json3-dev

    - name: Update Facebook Libraries
      id: fb-libs
      run: |
        sudo ./update_fb_libs.sh

    - name: Initialize PostgreSQL Database
      id: init-db
      run: |
        echo "::group::Initializing Database"
        # Wait for PostgreSQL to be ready
        echo "Waiting for PostgreSQL to be ready..."
        for i in {1..30}; do
          if PGPASSWORD=change_this_password psql -h localhost -U app_user -d secure_app -c "SELECT 1" &>/dev/null; then
            echo "PostgreSQL is ready!"
            break
          fi
          echo "Waiting... ($i/30)"
          sleep 1
          if [ $i -eq 30 ]; then
            echo "::error::PostgreSQL failed to start"
            exit 1
          fi
        done

        # Run the initialization script
        echo "Running database initialization script..."
        if ! PGPASSWORD=change_this_password psql -h localhost -U app_user -d secure_app -f database/init.sql; then
          echo "::error::Failed to initialize database"
          exit 1
        fi
        echo "Database initialized successfully!"
        echo "::endgroup::"

    - name: Build Project
      id: build
      run: |
        echo "::group::Building Project"
        chmod +x build.sh
        if ! ./build.sh; then
          echo "::error::Build failed"
          exit 1
        fi
        echo "Build completed successfully!"
        echo "::endgroup::"

    - name: Configure SSL for server
      id: ssl-config
      run: |
        echo "::group::Configuring SSL"
        # Ensure SSL directory exists
        mkdir -p ssl

        # Generate self-signed certificate for testing
        openssl req -x509 -newkey rsa:4096 -keyout ssl/key.pem -out ssl/cert.pem -days 1 -nodes -subj "/CN=localhost" -addext "subjectAltName=DNS:localhost,IP:127.0.0.1"

        echo "SSL certificates generated successfully!"
        echo "::endgroup::"

    - name: Start and Test Server
      id: server-test
      run: |
        echo "::group::Testing Server"
        # Create logs directory
        mkdir -p logs

        # Start server in background
        cd build
        echo "Starting server..."
        ./secure_app_server --config=../config/server_config.json --verbose &
        SERVER_PID=$!

        # Wait for server to start
        echo "Waiting for server to start..."
        for i in {1..30}; do
          if curl -k -s https://localhost:8443/health > /dev/null; then
            echo "Server is running!"
            break
          fi
          echo "Waiting... ($i/30)"
          sleep 1
          if [ $i -eq 30 ]; then
            echo "::error::Server failed to start"
            # Print logs for debugging
            echo "Server logs:"
            cat ../logs/*.log || true
            kill $SERVER_PID || true
            exit 1
          fi
        done

        # Test endpoints
        echo "Testing health endpoint..."
        HEALTH_RESPONSE=$(curl -k -s https://localhost:8443/health)
        echo "Health endpoint response: $HEALTH_RESPONSE"

        if ! echo "$HEALTH_RESPONSE" | grep -q "OK"; then
          echo "::error::Health check failed"
          kill $SERVER_PID || true
          exit 1
        fi

        echo "All tests passed!"

        # Gracefully stop the server
        echo "Stopping server..."
        kill $SERVER_PID

        # Wait for server to stop
        for i in {1..10}; do
          if ! ps -p $SERVER_PID > /dev/null; then
            echo "Server stopped successfully!"
            break
          fi
          sleep 1
          if [ $i -eq 10 ]; then
            echo "::warning::Server did not stop gracefully, forcing..."
            kill -9 $SERVER_PID || true
          fi
        done

        echo "::endgroup::"
